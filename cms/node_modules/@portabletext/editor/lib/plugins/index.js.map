{"version":3,"file":"index.js","sources":["../../src/plugins/plugin.behavior.tsx","../../src/plugins/plugin.event-listener.tsx","../../src/plugins/plugin.editor-ref.tsx","../../src/internal-utils/get-text-to-emphasize.ts","../../src/behaviors/behavior.decorator-pair.ts","../../src/plugins/plugin.decorator-shortcut.ts","../../src/plugins/plugin.markdown.tsx","../../src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/editor-machine'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import React from 'react'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {defineBehavior} from './behavior.types'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: selectors.EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            value: snapshot.context.value,\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          value: snapshot.context.value,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                value: snapshot.context.value,\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              value: snapshot.context.value,\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [event],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        {\n          type: 'decorator.add',\n          decorator,\n          offsets: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        },\n        // Delete the suffix\n        {\n          type: 'delete.text',\n          ...suffixOffsets,\n        },\n        // Delete the prefix\n        {\n          type: 'delete.text',\n          ...prefixOffsets,\n        },\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        {\n          type: 'decorator.remove',\n          decorator,\n        },\n        {\n          type: 'effect',\n          effect: () => {\n            config.onDecorate({\n              ...suffixOffsets.anchor,\n              offset:\n                suffixOffsets.anchor.offset -\n                (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n            })\n          },\n        },\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {defineBehavior} from '../behaviors/behavior.types'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\nimport type {EditorSchema} from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.selection) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.selection.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.selection.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        (_, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          {\n            type: 'history.undo',\n          },\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'delete.backward'})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {useEditor} from '../editor/editor-provider'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [{type: 'delete', selection}]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * Other cases of `insert.block` are allowed.\n   *\n   * If a text block is inserted and the focus block is fully selected, then\n   * the focus block can be replaced with the inserted block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionEndPoint = selectors.getSelectionEndPoint(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockStartPoint = utils.getBlockStartPoint(focusTextBlock)\n      const blockEndPoint = utils.getBlockEndPoint(focusTextBlock)\n      const newFocus = utils.getBlockEndPoint({\n        node: event.block,\n        path: [{_key: event.block._key}],\n      })\n\n      if (\n        utils.isEqualSelectionPoints(blockStartPoint, selectionStartPoint) &&\n        utils.isEqualSelectionPoints(blockEndPoint, selectionEndPoint)\n      ) {\n        return {focusTextBlock, newFocus}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {focusTextBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: event.block, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionEndPoint = selectors.getSelectionEndPoint(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockBeforeStartPoint = utils.splitTextBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n        point: selectionStartPoint,\n      })?.before\n      const blockAfterEndPoint = utils.splitTextBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n        point: selectionEndPoint,\n      })?.after\n\n      if (!blockBeforeStartPoint || !blockAfterEndPoint) {\n        return false\n      }\n\n      const targetBlock = utils.mergeTextBlocks({\n        context: snapshot.context,\n        targetBlock: blockBeforeStartPoint,\n        incomingBlock: event.block,\n      })\n\n      const newFocus = utils.getBlockEndPoint({\n        node: targetBlock,\n        path: [{_key: targetBlock._key}],\n      })\n\n      const mergedBlock = utils.mergeTextBlocks({\n        context: snapshot.context,\n        targetBlock,\n        incomingBlock: blockAfterEndPoint,\n      })\n\n      return {focusTextBlock, mergedBlock, newFocus}\n    },\n    actions: [\n      (_, {focusTextBlock, mergedBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: mergedBlock, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({context, event}) => {\n      return event.blocks\n        .filter((block) => utils.isTextBlock(context, block))\n        .reduce((targetBlock, incomingBlock) => {\n          return utils.mergeTextBlocks({\n            context,\n            targetBlock,\n            incomingBlock,\n          })\n        })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Block objects do not fit in a one-line editor\n   */\n  defineBehavior({\n    on: 'insert.block object',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.text block` is raised as an `insert.block` so it can be handled\n   * by the Behaviors above.\n   */\n  defineBehavior({\n    on: 'insert.text block',\n    actions: [\n      ({context, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _key: context.keyGenerator(),\n            _type: context.schema.block.name,\n            children: event.textBlock?.children ?? [],\n          },\n          placement: event.placement,\n        }),\n      ],\n    ],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","EventListenerPlugin","on","useEffectEvent","subscription","unsubscribe","EditorRefPlugin","React","forwardRef","_","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","MarkdownPlugin","createMarkdownBehaviors","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","placement","selectionEndPoint","block","blockStartPoint","blockEndPoint","newFocus","node","_key","blockPath","blockBeforeStartPoint","point","before","blockAfterEndPoint","after","targetBlock","incomingBlock","mergedBlock","blocks","filter","reduce","raise","keyGenerator","_type","name","children","textBlock","OneLinePlugin"],"mappings":"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"}